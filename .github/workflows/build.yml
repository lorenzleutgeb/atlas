name: build
on: [push]
jobs:
  nix:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: cachix/install-nix-action@v12
      with:
        install_url: https://releases.nixos.org/nix/nix-2.5.1/install
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
    - run: |
        nix --version
        nix show-config
    - uses: cachix/cachix-action@v8
      with:
        name: lorenzleutgeb-public
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1.6.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.CR_PAT }}
    - name: Build 'atlas'
      id: atlas
      run: |
        PKG=atlas
        nix build .#$PKG --no-link --print-build-logs --json
        RESULT=$(nix path-info .#$PKG)
        echo "::set-output name=result::$RESULT"
        #RESULT_JACOCO=$(nix path-info .#packages.x86_64-linux.$PKG.jacoco)
        #echo "::set-output name=result-jacoco::$RESULT_JACOCO"
    - name: Build 'atlas-docker'
      id: atlas-docker
      run: |
        PKG=atlas-docker
        nix build .#$PKG --no-link --print-build-logs --json
        RESULT=$(nix path-info .#$PKG)
        docker load < $RESULT
        docker tag atlas:latest lorenzleutgeb/atlas:$GITHUB_SHA
        docker tag atlas:latest ghcr.io/lorenzleutgeb/atlas/atlas:$GITHUB_SHA
        echo "::set-output name=result::$RESULT"
    - name: Build 'atlas-shell-docker'
      id: atlas-shell-docker
      run: |
        PKG=atlas-shell-docker
        nix build .#$PKG --no-link --print-build-logs --json
        RESULT=$(nix path-info .#$PKG)
        docker load < $RESULT
        docker tag atlas-shell:latest lorenzleutgeb/atlas-shell:$GITHUB_SHA
        docker tag atlas-shell:latest ghcr.io/lorenzleutgeb/atlas/atlas-shell:$GITHUB_SHA
        echo "::set-output name=result::$RESULT"
    - name: Push Docker Images
      run: |
        docker push -q ghcr.io/lorenzleutgeb/atlas/atlas:$GITHUB_SHA
        docker push -q ghcr.io/lorenzleutgeb/atlas/atlas-shell:$GITHUB_SHA
   #- uses: codecov/codecov-action@v1
   #  with:
   #    files:  ${{ steps.atlas.outputs.result-jacoco }}
    - uses: actions/upload-artifact@v2
      with:
        name: atlas
        path: ${{ steps.atlas.outputs.result }}
    - uses: actions/upload-artifact@v2
      with:
        name: atlas-docker
        path: ${{ steps.atlas-docker.outputs.result }}
    - uses: actions/upload-artifact@v2
      with:
        name: atlas-shell-docker
        path: ${{ steps.atlas-shell-docker.outputs.result }}
  gradle:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0
    - uses: actions/setup-java@v2
      with:
        java-version: 17
        distribution: 'temurin'
    - name: Set up Graal
      run: |
        mkdir graalvm
        wget -qO- 'https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-21.3.0/graalvm-ce-java17-linux-amd64-21.3.0.tar.gz' | tar xzf - --strip-components=1 -C graalvm
        ./graalvm/bin/gu install native-image
        echo "${PWD}/graalvm/bin" >> $GITHUB_PATH
        echo "org.gradle.java.installations.paths=${PWD}/graalvm" >> gradle.properties
    - run: |
        sudo apt-get install -y -q build-essential libz-dev zlib1g-dev libz3-java z3
        sudo ldconfig -v
        ldconfig -p
        stat /usr/lib/x86_64-linux-gnu/jni/libz3java.so
        stat /usr/lib/x86_64-linux-gnu/libz3.so
        echo "LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu/jni" >> $GITHUB_ENV
    - run: java -XshowSettings:properties -version
    - uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '7.3.3'
        arguments: '--stacktrace javaToolchains jacocoTestReport nativeCompile '
    - run: ./build/native/nativeCompile/atlas --help
